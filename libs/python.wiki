<h1>Python 开源库及示例代码</h1>

= =

= 说明 =

本页面汇总俺收集的各种 Python 代码库，不定期更新。

本页面列出的各种 Python 库/模块，如果注明了官网的网址，说明这个库是第三方的；否则就是 Python 语言内置的标准库。

如果你发现本页面的开源库有错漏之处，有 GitHub 帐号的同学，可以给俺发 issue；没帐号的同学，可以去[http://program-think.blogspot.com/ 俺博客]留言。


----


= 1 算法 =

== 1.1 字符串处理 ==

=== 1.1.1 正则表达式 ===

==== re ====

正则表达式的标准库，提供基于正则的匹配和替换。

=== 1.1.2 字符集 ===

==== chardet ====

官网：[https://github.com/erikrose/chardet]

chardet 可以猜测任意一段文本的字符集编码。对于编码类型未知的文本，它会很有用。

chardet 既可以作为模块来使用，也可以作为命令行工具来使用。

代码示例
<source lang="python">
import chardet
print(chardet.detect(bytes))
</source>

=== 1.1.3 （其它） ===

==== StringIO / cStringIO ====

以读写文件的方式来操作字符串（有点类似于内存文件）。

cStringIO 是 C 语言实现的，性能更高；而 StringIO 是 Python 实现的，提供 Unicode 兼容性。


== 1.2 编码/解码 ==

=== 1.2.1 base64 ===

[https://en.wikipedia.org/wiki/Base64 Base64] 是一组编码算法的总称。用于把二进制数据编码为文本。

==== base64 ====

标准库，提供 Base16、Base32、Base64 格式的编码和解码。

=== 1.2.2 uuencode ===

[https://en.wikipedia.org/wiki/Uuencode uuencode] 出现于早期的 Unix 系统。用于把二进制编码为文本，以便通过邮件系统发送。

==== uu ====

标准库，提供 uuencode 格式的编码和解码。

=== 1.2.3 BinHex ===

[https://en.wikipedia.org/wiki/BinHex BinHex] 起先用于 Mac OS 系统，类似于 uuencode

==== binhex ====

标准库，提供 BinHex 格式的编码和解码。


== 1.3 数学类 ==

==== math ====

这个标准库顾名思义，封装了常用的数学函数（开方、指数、对数、三角函数、等）

==== random ====

这个标准库顾名思义，是用来进行随机数生成的

代码示例
<source lang="python">
&#35; 生成 0-100 的随机数
import random
random.seed()
random.randint(0, 100)
</source>

==== fractions ====

这个标准库封装了跟有理数（分数）相关的运算


== 1.4 安全类 ==

==== hashlib ====

在 Python 2.5 版本加入到标准库中。通过它，你可以很方便地计算各种散列值。

它支持的哈希算法有：MD5 SHA1 SHA224 SHA256 SHA384 SHA512

关于散列算法，俺写过一篇扫盲（在“[http://program-think.blogspot.com/2013/02/file-integrity-check.html 这里]”）。

代码示例
<source lang="python">
&#35; 计算字符串的 SHA1 散列值
import hashlib
sha1 = hashlib.sha1("Hello, world").hexdigest()
</source>

==== PyCrypto ====

官网：[http://www.dlitz.net/software/pycrypto/]

这个库包含了常见的对称加密算法（DES、AES、IDEA 等）、公钥加密算法（RSA、DSA 等）、散列算法（MD5、SHA1、RIPEMD 等）。

==== pyOpenSSL ====

官网：[http://pyopenssl.sourceforge.net/]

OpenSSL 在加密领域可是大名鼎鼎。这个库使用 Python 对 OpenSSL 进行很薄的封装。


----


= 2 跨编程语言 =

Python 可以很容易地跟其它编程语言整合。整合之后，就可以在 Python 代码中使用其它编程语言的函数、模块、库，非常爽！

== 2.1 整合 C / C++ 语言 ==

==== ctypes ====

ctypes 在 Python 2.5 版本加入到标准库中。

通过它，你可以很方便地调用 C/C++ 动态库导出的函数，可以在 Python 中使用各种 C/C++ 的数据类型（比如指针）。

代码示例
<source lang="python">
&#35; 调用 Linux/Unix 系统的标准 C 函数，获取当前时间
from ctypes import *
libc = CDLL("libc.so.6")
time = libc.time(None)

&#35; 调用 Windows 系统 API，弹出消息提示框
from ctypes import c_int, WINFUNCTYPE, windll
from ctypes.wintypes import HWND, LPCSTR, UINT
prototype = WINFUNCTYPE(c_int, HWND, LPCSTR, LPCSTR, UINT)
paramflags = (1, "hwnd", 0), (1, "text", "Hi"), (1, "caption", None), (1, "flags", 0)
MessageBox = prototype(("MessageBoxA", windll.user32), paramflags)
MessageBox(text="Hello, world", flags=2)
</source>

==== SWIG ====

官网：[http://swig.org/]

这是一个很老牌的、有名气的工具，它可以把多种语言（Java、Python、C#、Ruby、PHP、Perl、Lua、Go、等）整合到 C/C++ 中。

==== Cython ====

官网：[http://cython.org/]

这个工具可以让你用 Python 的语法写扩展模块的代码，然后它帮你把 Python 代码编译为本地动态库（机器码）。

用它编译出来的扩展模块，其性能跟 C/C++ 编写的扩展模块相当。

== 2.2 整合 JVM 平台 ==

==== Jython ====

官网：[http://www.jython.org/]

通过 Jython 可以让 Python 代码运行在 JVM 上，并且可以调用其它的 JVM 语言的代码（比如 Java、Scale）

== 2.3 整合 dotNet 平台 ==

==== IronPython ====

官网：[http://ironpython.net/]

通过 IronPython 可以让 Python 代码运行在 dotNET 平台上，并且可以调用其它的 dotNET 语言的代码（比如 C# F#）

== 2.4 整合 Objective-C 语言 ==

==== PyObjC ====

官网：[http://pyobjc.sourceforge.net/]

这是用 Python 封装 Mac OS X 上的 Objective-C 库。


----


= 3 操作系统相关 =

==== os ====

这是一个非常基本的标准库，提供了常见的操作系统相关操作。

== 3.1 文件和目录操作 ==

==== shutil ====

相对于 os 标准库，shutil 标准库提供了一些比较高级的文件和目录操作（目录递归复制、目录递归删除、目录压缩打包、等）

代码示例
<source lang="python">
&#35; 递归删除某个目录
import shutil
shutil.rmtree(xxxx)
</source>

==== glob ====

这个标准库用于查找文件（支持通配符）

代码示例
<source lang="python">
&#35; 获取当前目录所有 txt 文件
import glob
files = glob.glob("./*.txt")
</source>

==== fnmatch ====

这个标准库用于匹配文件名（支持通配符）

代码示例
<source lang="python">
&#35; 列出当前目录所有 txt 文件
import os, fnmatch
for file in os.listdir(".") :
    if fnmatch.fnmatch(file, "*.txt") :
        print(file)
</source>

==== tempfile ====

使用这个标准库，可以安全地生成临时文件或临时目录。

== 3.2 本地进程间通信（IPC） ==

==== subprocess & multiprocessing ====

用于进程管理的标准库，可以启动子进程，通过标准输入输出跟子进程交互。

其中 multiprocessing 是 2.6 版本加入到标准库的。

==== signal ====

用于进程信号处理的标准库。

==== mmap ====

提供了内存映射文件的支持。

代码示例
<source lang="python">
&#35; 利用 mmap 在父子进程间交换数据
import os
import mmap

map = mmap.mmap(-1, 13)
map.write("Hello, world")

pid = os.fork()
if pid == 0:  &#35; 子进程
    map.seek(0)
    print(map.readline())
    map.close()
</source>

== 3.3 Windows 系统相关 ==

==== PyWin32 ====

官网：[http://python.net/crew/mhammond/win32/]

这个第三方库封装了 Windows API 及 COM API。通过它可以方便地用 Python 进行 Windows 编程（调用 COM 组件、编写 Windows 服务、等）。

== 3.4 Linux & Unix 系统相关 ==

==== syslog ====

通过这个标准库，可以很方便地跟 POSIX 的 syslog 服务进行交互。

== 3.5 程序打包 ==

==== PyInstaller ====

官网：[http://www.pyinstaller.org/]

PyInstaller 可以把你的 Python 代码制作成独立运行的程序（不依赖 Python 环境就可以运行）。

该工具支持多种操作系统，包括：Windows、Linux、Mac OS X、Solaris、AIX、等。

==== py2exe ====

官网：[http://www.py2exe.org/]

py2exe 的功能类似 PyInstaller，但只支持 Windows 平台。

==== py2app ====

官网：[https://bitbucket.org/ronaldoussoren/py2app]

它很类似于 [http://www.py2exe.org/ py2exe]，差别在于 [http://www.py2exe.org/ py2exe] 支持 Windows 平台，而 [https://bitbucket.org/ronaldoussoren/py2app py2app] 支持 Mac OS X 平台。

==== EasyInstall & Setuptools ====

官网：[https://pypi.python.org/pypi/setuptools]

这套工具可以帮助你进行第三方库的管理（下载、编译、安装、升级、卸载）


----


= 4 Web 开发 =

如今 Web 开发很火，俺把 Web 相关的单独分一类。

== 4.1 HTTP 协议 ==

==== httplib & httplib2 & http.request & urllib.parse ====

这几个库可以进行各种 HTTP 客户端请求（GET、POST、等）。

Python2 的模块名是 httplib 和 httplib2；到 Python3，模块名改为 http.request 和 urllib.parse

代码示例
<source lang="python">
&#35; 读取指定 URL 的网页内容
import urllib
handle = urllib.urlopen("http://www.google.com")
page = handle.read()
handle.close()
</source>

== 4.2 Web Server ==

==== SimpleHTTPServer & http.server ====

提供轻量级 HTTP Server 的标准库。

Python2 的模块名叫 SimpleHTTPServer；到 Python3 模块名改为 http.server

代码示例
<source lang="python">
&#35; 一个极简单的 HTTP 服务
import SocketServer
import SimpleHTTPServer

PORT = 8000
Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
httpd = SocketServer.TCPServer(("", PORT), Handler)
print("serving at port %d" % PORT)
httpd.serve_forever()
</source>

== 4.3 Web 开发框架 ==

==== Django ====

官网：[https://www.djangoproject.com/]

在 Python 社区，Django 是目前最有影响力的 Web 开发框架。该框架很重型，内置了 Web 服务端开发常用的组件（比如：ORM、用户管理）。

Django 应用范围很广，比如 Google 的 Web 开发平台 GAE 就支持它。

而且它完全支持前面提到的 Jython 运行环境，可以运行在任何 J2EE 服务器上。

==== TurboGears ====

官网：[http://www.turbogears.org/]

又一个重型的 Web 开发框架，名气仅次于 Django。

== 4.4 Web前端 & JS整合 ==

==== Pyjamas & pyjs ====

官网：[http://pyjs.org/]

这是从 GWT（Google Web Toolkit）移植的第三方库。提供了 Python 到 JS 的编译，AJAX 框架等功能。

Pyjamas 甚至能用来开发桌面 GUI 应用。

==== pyjaco ====

官网：[https://github.com/chrivers/pyjaco]

这也是一个 Python 到 JavaScript 的编译工具。

== 4.5 浏览器整合 ==

==== webbrowser ====

操纵当前系统的默认浏览器，访问指定 URL 的页面。

代码示例
<source lang="python">
&#35; 用默认浏览器打开 Google 主页
import webbrowser
webbrowser.open("http://www.google.com")
</source>

==== pyv8 ====

官网：[https://pypi.python.org/pypi/PyV8]

[https://developers.google.com/v8/ v8] 是 Google 开发的 JavaScript 解释引擎。这是对 v8 引擎的 Python 封装。

代码示例
<source lang="python">
import PyV8

ctxt1 = PyV8.JSContext()
ctxt1.enter()
ctxt1.eval("1+2")  &#35; 对 JS 表达式求值

class Global(PyV8.JSClass) :  &#35; 定义一个兼容 JS 的类
    def hello(self) :
        print("Hello, world")

ctxt2 = PyV8.JSContext(Global())  &#35; 创建一个 JS 上下文，传入 Global 类的对象
ctxt2.enter()                    
ctxt2.eval("hello()")  &#35; 调用 hello() 函数
</source>

==== PyWebKitGtk ====

官网：[https://github.com/jmalonzo/pywebkitgtk]

[http://webkitgtk.org/ WebKitGtk] 是一个基于 WebKit 的 Web 渲染引擎。

PyWebKitGtk 则提供了对 WebKitGtk 的 Python 封装。


----


= 5 网络编程 =

== 5.1 标准协议 ==

=== 5.1.1 链路层 & 网络层 ===

==== Scapy ====

官网：[http://www.secdev.org/projects/scapy/]

这是一个底层的网络库，可以在不同协议层次构造网络数据包（包括链路层、网络层、传输层），还支持 Sniffer 抓包。

搞网络安全的网友应该会喜欢这个库。

代码示例
<source lang="python">
&#35; 传统的 ping 扫描（网络层）
ans,unans = sr(IP(dst="192.168.1.1-254")/ICMP())

&#35; 局域网内的 ARP 扫描（链路层）
ans,unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst="192.168.1.0/24"), timeout=2)
</source>

=== 5.1.2 传输层 ===

==== socket ====

Python 标准库很早就提供了对 socket 编程的支持。

这个标准库是对伯克利套接字进行简单的封装，其 API 基本上跟 BSD SOCKET 一一对应。

==== asyncore ====

这个标准库提供了异步 SOCKET 的支持。

==== asynchat ====

这个标准库基于上述的 asyncore，提供更高层的 API，简化异步通讯编程。

=== 5.1.3 应用层 ===

==== ftplib ====

封装 FTP 协议（文件传输）的标准库

==== smtplib ====

封装 SMTP 协议（邮件发送）的标准库

==== imaplib ====

封装 IMAP 协议（邮件接收）的标准库

==== poplib ====

封装 POP3 协议（邮件接收）的标准库

==== PycURL ====

官网：[http://pycurl.sourceforge.net/]

cURL 是一个功能很强的网络库/网络工具，支持 N 多应用层协议。这是用 Python 封装的第三方库。

关于 cURL，俺前几年写过一篇博文推荐它（在“[http://program-think.blogspot.com/2009/03/opensource-review-curl-library.html 这里]”）。

==== jabber.py ====

官网：[http://jabberpy.sourceforge.net/]

Jabber（又称 XMPP）是IM（即时通信）协议的标准。这是用 Python 封装的第三方库。

==== irclib ====

官网：[https://bitbucket.org/jaraco/irc]

IRC 是 Internet Relay Chat 的缩写。这是用 Python 封装的第三方库。

== 5.2 网络开发框架 ==

==== Twisted ====

官网：[http://twistedmatrix.com/]

这是一个基于 Python 网络通讯开发框架，有十多年历史，名气很大。

它的某些设计类似于 C++ 的 [https://en.wikipedia.org/wiki/Adaptive_Communication_Environment ACE] 框架。除了能用来进行传输层（TCP UDP）的开发，还提供了若干应用层协议（HTTP、XMPP、SSH、IRC、等）的支持。

代码示例
<source lang="python">
&#35; 实现一个简单的 Echo 服务，监听在 12345 端口
from twisted.internet import protocol, reactor

class Echo(protocol.Protocol) :
    def dataReceived(self, data) :
        self.transport.write(data)

class EchoFactory(protocol.Factory) :
    def buildProtocol(self, addr) :
        return Echo()

reactor.listenTCP(12345, EchoFactory())
reactor.run()
</source>


----


= 6 数据库 =

为了便于数据库开发，Python 社区制定了数据库的 API 规范（[https://www.python.org/dev/peps/pep-0249/ PEP 249]）。

只要是涉及到数据库操作，标准库和大部分第三方库都会遵循该规范（请看如下几个模块的示例代码）。

== 6.1 数据库中间件 ==

=== 6.1.1 ODBC ===

==== pyODBC ====

官网：[https://github.com/mkleehammer/pyodbc]

pyODBC 封装了 ODBC API，通过它可以访问各种数据库（只要有 ODBC 驱动即可）。

代码示例
<source lang="python">
&#35; 查询某个 ODBC 数据源的某个表
import pyodbc
conn = pyodbc.connect("DSN=xxx;PWD=password")
cursor = conn.cursor()
cursor.execute("SELECT field1 FROM table1")

while True :
    row = cursor.fetchone()
    if not row :
        break
    print(row)

cursor.close()
conn.close()
</source>

==== ceODBC ====

官网：[http://ceodbc.sourceforge.net/]

又一个封装 ODBC API 的第三方库

=== 6.1.2 JDBC ===

==== Jython ====

官网：[http://www.jython.org/]

Jython 前面提到过。它可以基于 [https://en.wikipedia.org/wiki/Jdbc JDBC] 操作数据库。

=== 6.1.3 ADO & ADO.NET ===

==== PyWin32 ====

官网：[http://python.net/crew/mhammond/win32/]

PyWin32 前面提到过。它可以基于 [https://en.wikipedia.org/wiki/ActiveX_Data_Objects ADO] 操作数据库。

==== IronPython ====

官网：[http://ironpython.net/]

IronPython 前面提到过。它可以基于 [https://en.wikipedia.org/wiki/ADO.NET ADO.NET] 操作数据库。


== 6.2 特定数据库 ==

=== 6.2.1 MySQL ===

==== MySQL for Python ====

官网：[http://mysql-python.sourceforge.net/]

操作 MySQL 的第三方库。

代码示例
<source lang="python">
&#35; 查询某个 MySQL 数据库的某个表
import MySQLdb
conn = MySQLdb.connect(db="test", passwd="password")
cursor = conn.cursor()
cursor.execute("SELECT field1 FROM table1")

while True :
    row = cursor.fetchone()
    if not row :
        break
    print(row)

cursor.close()
conn.close()
</source>

=== 6.2.2 PostgreSQL ===

==== psycopg ====

官网：[http://initd.org/psycopg/]

操作 PostgreSQL 的第三方库。

==== psycopg ====

官网：[http://www.pygresql.org/]

操作 PostgreSQL 的第三方库。

=== 6.2.3 Oracle ===

==== cx_Oracle ====

官网：[http://cx-oracle.sourceforge.net/]

操作 Oracle 的第三方库。

=== 6.2.4 MS SQL Server ===

==== pymssql ====

官网：[http://pymssql.org/]

操作微软 SQL Server 的第三方库。

=== 6.2.5 IBM DB2 ===

==== ibm-db ====

官网：[https://pypi.python.org/pypi/ibm_db]

操作 DB2 的第三方库。


=== 6.2.6 SQLite ===

==== sqlite3 ====

sqlite3 从 Python 2.5 版本开始加入到标准库中。通过它，你可以很方便地操作 SQLite 数据库。

[https://en.wikipedia.org/wiki/SQLite SQLite] 是一个很优秀的轻量级数据库，俺前几年写过一篇博文推荐它（在“[http://program-think.blogspot.com/2009/04/how-to-use-sqlite.html 这里]”）。

代码示例
<source lang="python">
&#35; 创建一个内存数据库，建表并插入记录
import sqlite3
conn = sqlite3.connect(":memory:")
cursor = conn.cursor()
cursor.execute("CREATE TABLE person (name text, age int)")
cursor.execute("INSERT INTO stocks VALUES ('TOM',20)")
conn.commit()
conn.close()
</source>

=== 6.2.7 Berkeley DB ===

==== PyBSDDB ====

官网：[http://www.jcea.es/programacion/pybsddb.htm]

操作 Berkeley DB 的第三方库。

== 6.3 ORM（Object-Relational Mapping） ==

==== SQLAlchemy ====

官网：[http://www.sqlalchemy.org/]

SQLAlchemy 支持的数据库有：MySQL、PostgreSQL、Sqlite、Oracle、MS SQL Server、Firebird、Sybase SQL Server、Informix、等。

代码示例
<source lang="python">
&#35; 通过对象的方式创建两张依赖关系的表
from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relation, sessionmaker

Base = declarative_base()

class Movie(Base) :
    &#95;&#95;tablename&#95;&#95; = "movies"

    id = Column(Integer, primary_key=True)
    title = Column(String(255), nullable=False)
    year = Column(Integer)
    directed_by = Column(Integer, ForeignKey("directors.id"))
    director = relation("Director", backref="movies", lazy=False)

    def &#95;&#95;init&#95;&#95;(self, title=None, year=None) :
        self.title = title
        self.year = year

    def &#95;&#95;repr&#95;&#95;(self) :
        return "Movie(%r, %r, %r)" % (self.title, self.year, self.director)
 
class Director(Base) :
    &#95;&#95;tablename&#95;&#95; = "directors"
 
    id = Column(Integer, primary_key=True)
    name = Column(String(50), nullable=False, unique=True)
 
    def &#95;&#95;init&#95;&#95;(self, name=None) :
        self.name = name
 
    def &#95;&#95;repr&#95;&#95;(self) :
        return "Director(%r)" % (self.name)
 
Base.metadata.create_all(create_engine("dbms://user:pwd@host/dbname"))
</source>

==== SQLObject ====

官网：[http://sqlobject.org/]

SQLObject 支持的数据库有：MySQL、PostgreSQL、Sqlite、MS SQL Server、Firebird、Sybase SQL Server、SAP DB、等。

代码示例
<source lang="python">
&#35; 通过对象的方式创建表
from sqlobject import *
sqlhub.processConnection = connectionForURI("sqlite:/:memory:")

class Person(SQLObject) :
    first_name = StringCol()
    last_name = StringCol()

Person.createTable()
</source>


----


= 7 桌面 GUI 开发 =

== 7.1 GUI 框架 / 组件库 ==

=== 7.1.1 基于 Tk ===

[https://en.wikipedia.org/wiki/Tk_(framework) Tk] 是一个跨平台的界面组件库。

==== Tkinter / tkinter ====

这是 Python 内置的标准库，封装了 Tcl/Tk 界面库。

Python2 的模块名叫 Tkinter，到 Python3 模块名改为 tkinter

代码示例
<source lang="python">
&#35; 用 Tkinter 写 Hello world
from Tkinter import *

if &#95;&#95;name&#95;&#95; == "&#95;&#95;main&#95;&#95;" :
    root = Tk()
    label = Label(root, text="Hello, world")
    label.pack()
    root.mainloop()
</source>

=== 7.1.2 基于 wxWidgets ===

[https://en.wikipedia.org/wiki/WxWidgets wxWidgets] 是 C++ 开发的跨平台框架（不仅包括 GUI，还有其它功能）。

==== wxPython ====

官网：[http://www.wxpython.org/]

在所有的 wxWidgets 的 Python 封装库中，这个是名气最大的。

[https://github.com/limodou/ulipad Ulipad]（知名的国产的 Python IDE）就是基于 wxPython 开发的。

代码示例
<source lang="python">
&#35; 用 wxPython 写 Hello world
import wx

class Frame(wx.Frame) :
    pass

class App(wx.App) :
    def OnInit(self) :
        self.frame = Frame(parent=None, title="Hello, world")
        self.frame.Show()
        self.SetTopWindow(self.frame)
        return True

if &#95;&#95;name&#95;&#95; == "&#95;&#95;main&#95;&#95;" :
    app = App()
    app.MainLoop()
</source>

==== PythonCard ====

官网：[http://pythoncard.sourceforge.net/]

又一个基于 wxWidgets 的 GUI 库。

=== 7.1.3 基于 GTK+ ===

[https://en.wikipedia.org/wiki/GTK%2B GTK+] 全称是（GIMP Toolkit），由 C 开发的跨平台界面组件库。

==== PyGTK ====

官网：[http://www.pygtk.org/]

这是 Python 对 GTK 的封装。

代码示例
<source lang="python">
&#35; 用 PyGTK 写 Hello world
import pygtk
pygtk.require("2.0")
import gtk

class HelloWorld :
    def &#95;&#95;init&#95;&#95;(self) :
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect("delete_event", self.delete_event)
        self.window.connect("destroy", self.destroy)
        self.window.set_border_width(10)

        self.button = gtk.Button("Hello, world")
        self.button.connect("clicked", self.hello, None)
        self.button.connect_object("clicked", gtk.Widget.destroy, self.window)
        self.window.add(self.button)

        self.button.show()
        self.window.show()

    def main(self) :
        gtk.main()

    def hello(self, widget, data=None) :
        print("Hello, world")

    def delete_event(self, widget, event, data=None) :
        print("delete event occurred")
        return False

    def destroy(self, widget, data=None) :
        gtk.main_quit()

if &#95;&#95;name&#95;&#95; == "&#95;&#95;main&#95;&#95;" :
    hello = HelloWorld()
    hello.main()
</source>

=== 7.1.4 基于 Qt ===

[https://en.wikipedia.org/wiki/Qt_(toolkit) Qt] 是 C++ 开发的跨平台框架（不仅包括 GUI，还有其它功能）。

==== PyQt ====

官网：[http://www.riverbankcomputing.com/software/pyqt/]

这是 Python 对 Qt 的封装。

代码示例
<source lang="python">
&#35; 用 pyQt 写 Hello world
import sys
from PyQt4.QtGui import *

if &#95;&#95;name&#95;&#95; == "&#95;&#95;main&#95;&#95;" :
    app = QApplication(sys.argv)
    window = QWidget()

    window.resize(320, 240)
    window.setWindowTitle("Hello, world")
    window.show()
    sys.exit(app.exec_())
</source>

==== PySide ====

官网：[http://www.pyside.org/]

这也是 Python 对 Qt 的封装。

=== 7.1.5 基于 FLTK ===

[https://en.wikipedia.org/wiki/FLTK FLTK] 全称是（ Fast Light Tool Kit），由 C++ 开发的跨平台、轻量级界面组件库。

==== PyFLTK ====

官网：[http://pyfltk.sourceforge.net/]

这是 Python 对 FLTK 的封装。

=== 7.1.6 基于 Windows 平台 ===

==== PyWin32 ====

官网：[http://python.net/crew/mhammond/win32/]

PyWin32 前面提到过。它可以提供原生的 Windows GUI 界面。

==== IronPython ====

官网：[http://ironpython.net/]

IronPython 前面提到过。它可以提供 dotNET 的 GUI 界面。

=== 7.1.7 基于 JVM 平台 ===

==== Jython ====

官网：[http://www.jython.org/]

Jython 前面提到过。它可以提供基于 Java 的 [https://en.wikipedia.org/wiki/Swing_%28Java%29 Swing] 界面。

=== 7.1.8 （其它） ===

==== EasyGUI ====

官网：[http://easygui.sourceforge.net/]

EasyGUI 这是一个很轻量级的库。跟其它 GUI 不同之处在于——它没有“事件驱动”。

==== PyGUI ====

官网：[http://www.cosc.canterbury.ac.nz/greg.ewing/python_gui/]

PyGUI 是一个更高层的 GUI 库，底层分别封装了 [http://python.net/crew/mhammond/win32/ PyWin32]（Windows 平台）、[http://www.pygtk.org/ PyGTK]（Linux 平台）、[http://pyobjc.sourceforge.net/ PyObjC]（Mac OS X 平台）。

==== Kivy ====

官网：[http://kivy.org/]

跨平台的多媒体框架和界面库，用来开发比较炫的界面。

除了支持桌面操作系统，还支持 Android / iOS，支持多点触摸。

==== OcempGUI ====

官网：[http://ocemp.sourceforge.net/gui.html]

基于 PyGame 的一个跨平台 GUI 库（PyGame 下面会提到）。

== 7.2 图表/报表 ==

==== matplotlib ====

官网：[http://matplotlib.org/]

这是一个有名的图形库，主要用来绘制数学相关的图形。

它跟后面提到的 [http://www.scipy.org/ SciPy] 整合可以起到类似 MATLAB 的效果。效果图在“[http://matplotlib.org/users/screenshots.html 这里]”。

==== Gnuplot.py ====

官网：[http://gnuplot-py.sourceforge.net/]

这是 Python 对 [http://www.gnuplot.info/ gnuplot] 的封装。gnuplot 的效果图在“[http://www.gnuplot.info/screenshots/index.html 这里]”。

==== PyQtGraph ====

官网：[http://www.pyqtgraph.org/]

这是一个纯 Python 的库，依赖于 PyQt4 / PySide。效果图在“[http://www.pyqtgraph.org/images/plotting_sm.png 这里]”。

==== PyX ====

官网：[http://pyx.sourceforge.net/]

这个库可以跟 TeX / LaTeX 无缝整合，支持导出为 PostScript / PDF 格式。适合用来制作报表。效果图在“[http://pyx.sourceforge.net/gallery/index.html 这里]”。

==== Chaco ====

官网：[http://code.enthought.com/chaco/]

这是一个商业公司维护的库，主要提供2维图表。效果图在“[http://docs.enthought.com/chaco/user_manual/annotated_examples.html 这里]”。


----


= 8 处理文件格式 =

== 8.1 结构化数据格式 ==

=== 8.1.1 CSV ===

[https://en.wikipedia.org/wiki/Comma-separated_values CSV] 是一种历史悠久的结构化数据存储格式。其效果类似于一张数据库二维表。

==== csv ====

标准库，提供 CSV 格式文件的读写。

=== 8.1.2 JSON ===

JSON 格式源自 JavaScript，如今在 Web 开发中广为应用。

==== json ====

标准库，提供 JSON 格式的编码和解码。

代码示例
<source lang="python">
import json

json.dumps(["foo", {"bar": ("baz", None, 1.0, 2)}])
&#35; JSON 编码
&#35; 得到如下字符串
&#35; """["foo", {"bar": ["baz", null, 1.0, 2]}]"""

json.loads("""["foo", {"bar":["baz", null, 1.0, 2]}]""")
&#35; JSON 解码
&#35; 得到如下对象
&#35; [u"foo", {u"bar": [u"baz", None, 1.0, 2]}]
</source>

=== 8.1.3 YAML ===

[https://en.wikipedia.org/wiki/YAML YAML] 是一种类似于 json 的结构化数据格式。它在确保可读性的基础上，提供了超越 json 的灵活性和扩展性。

==== PyYAML ====

官网：[http://pyyaml.org/]

pyyaml 提供了 Python 对 YAML 的封装。

=== 8.1.4 Protocol Buffers ===

[https://en.wikipedia.org/wiki/Protocol_Buffers Protocol Buffers] 是 Google 开发的一个跨语言的库，用于网络传输业务数据时的“编码/解码”。

其优点是：跨多种语言、高性能、向前兼容、向后兼容。俺前几年写过一篇博文推荐 protobuf（在“[http://program-think.blogspot.com/2009/05/opensource-review-protocol-buffers.html 这里]”）。

==== protobuf ====

官网：[https://developers.google.com/protocol-buffers/]

作为 Protocol Buffers 的发明者，Google 默认实现了三种编程语言（C++、Java、Python）对它的支持。


== 8.2 处理压缩文件 / 打包文件 ==

=== 8.2.1 zip ===

==== zipfile ====

处理 zip 格式的标准库。

=== 8.2.2 bzip2（bz2） ===

==== bz2 ====

处理 bzip2 格式的标准库。

=== 8.2.3 gzip（gz） ===

==== gzip ====

处理 gzip 格式的标准库。

==== zlib ====

处理 gzip 格式的标准库。

=== 8.2.4 tar ===

==== tarfile ====

处理 tar 格式的标准库。

=== 8.2.5 7zip（7z） ===

==== PyLZMA ====

官网：[http://www.joachim-bauch.de/projects/pylzma/]

处理 7zip 格式的第三方库。

=== 8.2.6 rar ===

==== rarfile ====

官网：[http://rarfile.berlios.de/]

处理 rar 格式的第三方库。

=== 8.2.7 msi ===

==== msilib ====

处理 msi 格式的标准库，从 Python 2.5 版本开始提供。


== 8.3 处理标记语言 ==

=== 8.3.1 XML ===

==== xml.dom & xml.miniDom & xml.etree.ElementTree ====

用 DOM（Document Object Model）方式处理 XML 文件的标准库。

==== xml.sax & xml.parsers.expat ====

用 SAX（Simple API for XML）方式处理 XML 文件的标准库。

==== lxml ====

官网：[http://lxml.de/]

著名的 C 语言库 libxml 和 libxslt 的 Python 封装。

功能很强，支持 XPath 1.0、XSLT 1.0、扩展 EXSLT、等。还可以用来解析 HTML 格式。

=== 8.3.2 HTML ===

==== HTMLParser ====

以回调方式解析 HTML/XHTML 文件内容的标准库。


== 8.4 处理图片 ==

==== Python Imaging Library（PIL） ====

官网：[http://www.pythonware.com/products/pil/]

这是一个很有名气的 Python 图像处理库，支持常见图像文件格式（BMP、JPG、GIF、PNG、等）。

它可以对图像进行各种常见的处理（格式转换、旋转、缩放、剪切、等）。

代码示例
<source lang="python">
&#35; 旋转某图片并显示
from PIL import Image
im = Image.open("xxx.jpg")
im = im.rotate(90)
im.show()
</source>

==== Wand ====

官网：[http://docs.wand-py.org/]

它通过前面提到 ctypes 实现了对 [https://en.wikipedia.org/wiki/ImageMagick ImageMagick] 的封装（ImageMagick 是最强大的开源图片处理工具集）。

代码示例
<source lang="python">
from wand.image import Image
from wand.display import display

with Image(filename="mona-lisa.png") as img :
    print(img.size)
    for r in 1, 2, 3 :
        with img.clone() as i :
            i.resize(int(i.width * r * 0.25), int(i.height * r * 0.25))
            i.rotate(90 * r)
            i.save(filename="mona-lisa-{0}.png".format(r))
            display(i)
</source>


== 8.5 处理 PDF ==

==== pyfpdf ====

官网：[https://github.com/reingart/pyfpdf]

这是 [http://www.fpdf.org/ FPDF] 的 Python 移植库，用来生成 PDF 文档。

支持的功能比较全（嵌入字体、嵌入图片），文档也比较详细。

代码示例
<source lang="python">
&#35; 这是个简单 Hello World 示例
from fpdf import FPDF

pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", "B", 16)
pdf.cell(40, 10, "Hello, World")
pdf.output("test.pdf", "F")
</source>

<source lang="python">
&#35; 支持写入 HTML 语法。目前支持几种常见的 HTML tag
from pyfpdf import FPDF, HTMLMixin

class MyFPDF(FPDF, HTMLMixin) :
    pass
                    
pdf = MyFPDF()
pdf.add_page()
pdf.write_html(html)
pdf.output("test.pdf", "F")
</source>

==== pyPdf & PyPDF2 ====

官网：[http://pybrary.net/pyPdf/] & [http://knowah.github.com/PyPDF2/]

pyPdf 目前已经不继续升级维护了。PyPDF2 是 pyPdf 的 fork 并继续增加新功能。

除了可以提取文件属性，还可以切分/合并文档，加密/解密文档。

==== PDFMiner ====

官网：[http://www.unixuser.org/~euske/python/pdfminer/]

可以提取 PDF 文件属性以及每页的文本，支持把内容输出为 HTML 格式。


== 8.6 处理 Office 文档 ==

=== 8.6.1 Word（doc、docx） ===

==== PyWin32 ====

官网：[http://python.net/crew/mhammond/win32/]

PyWin32 前面提到过。它可以基于 [https://en.wikipedia.org/wiki/Component_Object_Model COM] 操作 Office 文档，包括 Word（本地需要安装 Office）。

=== 8.6.2 Excel（xls、xlsx） ===

==== pyExcelerator ====

官网：[http://sourceforge.net/projects/pyexcelerator/]

该库可以支持 Office Excel（97/2000/XP/2003）以及 OpenOffice Calc 的文档。无需依赖外部软件。

==== PyWin32 ====

官网：[http://python.net/crew/mhammond/win32/]

PyWin32 前面提到过。它可以基于 [https://en.wikipedia.org/wiki/Component_Object_Model COM] 操作 Office 文档，包括 Excel（本地需要安装 Office）。

=== 8.6.3 Power Point（ppt、pptx） ===

==== python-pptx ====

官网：[https://github.com/scanny/python-pptx]

该库可以用来生成 pptx（Open XML PowerPoint）格式的文档。

==== PyWin32 ====

官网：[http://python.net/crew/mhammond/win32/]

PyWin32 前面提到过。它可以基于 [https://en.wikipedia.org/wiki/Component_Object_Model COM] 操作 Office 文档，包括 Excel（本地需要安装 Office）。


== 8.7 处理 CHM ==

==== PyCHM ====

官网：[http://gnochm.sourceforge.net/pychm.html]

这是基于 [http://www.jedrea.com/chmlib/ chmlib] 的 Python 封装库。可以提取 CHM 文件的属性以及每个页面的内容。


== 8.8 处理 RTF ==

==== PyRTF ====

官网：[http://pyrtf.sourceforge.net/]

这个 Python 库可以用来处理 RTF（富文本格式）文档。


----


= 9 游戏开发 =

==== PyGame ====

官网：[http://www.pygame.org/]

跨平台的 Python 第三方库，用来辅助游戏开发的，名气非常大。

==== PyOpenGL ====

官网：[http://pyopengl.sourceforge.net/]

封装 [https://en.wikipedia.org/wiki/OpenGL OpenGL] 的 Python 第三方库。

==== Python-Ogre ====

官网：[http://www.python-ogre.org/]

封装 [https://en.wikipedia.org/wiki/OGRE OGRE]（3D 渲染引擎）的 Python 第三方库。


----


= 10 数值计算 / 科学计算 =

==== NumPy ====

官网：[http://www.numpy.org/]

NumPy 提供了功能强大、性能很高的数值数组，可以用来进行各种数值计算（包括矩阵运算）。

代码示例
<source lang="python">
&#35; 以下是传统 Python 写法，冗长且速度较慢
a = range(10000000)
b = range(10000000)
c = []
for i in range(len(a)) :
    c.append(a[i] + b[i])

&#35; 以下是 NumPy 的写法，简洁且速度飞快
import numpy as np
a = np.arange(10000000)
b = np.arange(10000000)
c = a + b
</source>

==== SciPy ====

官网：[http://www.scipy.org/]

SciPy 依赖 NumPy 提供的多维数组。相比 NumPy，SciPy 提供了更高层的数学运算模块（统计、线性代数、积分、常微分方程求解、傅立叶变换、信号处理、等），被广泛用于科研和工程领域。


----


= 11 其它 =

一些不方便归类的，暂时放到这里。

==== PyPy ====

官网：[http://www.pypy.org/]

这是一个用 Python 写的 Python 解释器（有点绕口令）。

PyPy 支持 JIT（Just-in-time compilation）和沙箱技术，可做到【比 CPython 更快的运行速度】。
